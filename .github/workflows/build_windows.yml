name: Build for Windows

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build ${{ matrix.platform }}-${{ matrix.arch }}
    runs-on: ${{ matrix.runs-on }}

    strategy:
      matrix:
        include:
          - platform: Windows
            target_platform: WINDOWS
            arch: x86_64
            runs-on: windows-latest
            toolchain: x86_64-w64-mingw32
          - platform: Windows
            target_platform: WINDOWS
            arch: i686
            runs-on: windows-latest
            toolchain: i686-w64-mingw32
          - platform: Windows
            target_platform: WINDOWS
            arch: arm64
            runs-on: windows-latest
            toolchain: aarch64-w64-mingw32

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: stable
        # Expose Dart SDK path for later steps
        env:
          DART_HOME: ${{ steps.setup-dart.outputs.dart-sdk-path }}

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.29'

      - name: Install Ninja
        run: |
          choco install ninja -y
          echo "C:\ProgramData\chocolatey\bin" >> $GITHUB_PATH

      - name: Install dependencies (Windows)
        run: |
          # 安装标准 MinGW
          choco install mingw --version 8.1.0 -y
          # 安装 ARM64 和 i686 交叉编译工具链
          choco install mingw-llvm -y
          echo "C:\ProgramData\mingw64\bin" >> $GITHUB_PATH
          echo "C:\ProgramData\llvm-mingw\bin" >> $GITHUB_PATH
      - name: Verify Compilers
        run: |
          where aarch64-w64-mingw32-gcc
          where i686-w64-mingw32-gcc
          where x86_64-w64-mingw32-gcc
      - name: Configure Windows CMake
        shell: bash
        run: |
          # 根据架构设置编译器路径
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            export CC="aarch64-w64-mingw32-gcc"
          elif [ "${{ matrix.arch }}" = "i686" ]; then
            export CC="i686-w64-mingw32-gcc"
          else
            export CC="x86_64-w64-mingw32-gcc"
          fi
      
          cmake \
            -G 'Ninja' \
            -DTARGET_PLATFORM=${{ matrix.target_platform }} \
            -DTARGET_ARCH=${{ matrix.arch }} \
            -DDART_SDK_PATH="${{ env.DART_HOME || '/usr/lib/dart' }}" \
            -DCMAKE_C_COMPILER=$CC \
            .
          
      - name: Build
        shell: bash
        run: |
          ninja

      - name: Verify Windows DLL architecture
        shell: bash
        run: |
          objdump -f libs/libWatcherPlus_${{ matrix.arch }}.dll | grep "file format"

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: WatcherPlus-${{ matrix.platform }}-${{ matrix.arch }}
          path: libs/libWatcherPlus_${{ matrix.arch }}.*
